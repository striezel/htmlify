# Use the official gcc image, based on debian.
# It can use version tags as well, like gcc:5.2.
# See https://hub.docker.com/_/gcc/ for more info.
image: gcc:15

variables:
  GIT_SUBMODULE_STRATEGY: recursive

build_gcc:
  stage: build
  before_script:
    - apt-get update
    - apt-get -y install catch2 cmake libxml2 libxml2-dev pkg-config zlib1g-dev
    # Remove parts of the submodule that are not used but would get into CI's
    # way when linting.
    - rm -rf ./pmdb/libstriezel/archive ./pmdb/libstriezel/common/graphics ./pmdb/libstriezel/common/gui ./pmdb/libstriezel/tests ./pmdb/code/templates ./pmdb/code/html_generation.cpp ./pmdb/tests
  script:
    - ./pmdb/ci/cpplint.sh
    - mkdir ./build
    - cd ./build
    - cmake ../
    - make -j4
    - ctest -V

build_clang:
  image: debian:13-slim
  stage: build
  before_script:
    - apt-get update
    - apt-get -y install catch2 cmake clang libxml2 libxml2-dev pkg-config zlib1g-dev
    # Remove parts of the submodule that are not used but would get into CI's
    # way when linting.
    - rm -rf ./pmdb/libstriezel/archive ./pmdb/libstriezel/common/graphics ./pmdb/libstriezel/common/gui ./pmdb/libstriezel/tests ./pmdb/code/templates  ./pmdb/code/html_generation.cpp ./pmdb/tests
    - export CC=clang && export CXX=clang++
  script:
    - ./pmdb/ci/cpplint.sh
    - mkdir ./build
    - cd ./build
    - cmake ../
    - make -j4
    - ctest -V
